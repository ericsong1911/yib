name: Build and Release

# This workflow runs automatically when a new tag starting with 'v' is pushed.
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Job 1: Run tests and linters first to ensure code quality.
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'

      - name: Install Dependencies
        run: | 
          go mod tidy
          go mod download

      - name: Run Go Tests with FTS5
        run: go test -tags sqlite_fts5 -v ./...

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.0

      - name: Run Go Linter
        run: |
          cd ${{ github.workspace }}
          $(go env GOPATH)/bin/golangci-lint run --build-tags=sqlite_fts5

  # Job 2: Build the binaries for each platform after tests pass.
  build-binaries:
    name: Build Binaries
    needs: test-and-lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            binary_name: "yib"
          - os: linux
            arch: arm64
            binary_name: "yib"
          - os: windows
            arch: amd64
            binary_name: "yib.exe"
          - os: darwin # macOS
            arch: amd64
            binary_name: "yib"
          - os: darwin # macOS
            arch: arm64
            binary_name: "yib"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'

      - name: Extract Release Version from Tag
        run: echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Build Go Binary with FTS5
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: go build -tags "sqlite_fts5" -ldflags="-s -w" -o "release_package/${{ matrix.binary_name }}" .

      - name: Prepare Release Package
        run: |
          cp README.md release_package/
          cp LICENSE release_package/
          if [ "${{ matrix.os }}" == "windows" ]; then
            cd release_package
            zip -r "../yib-${{ env.RELEASE_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.zip" .
          else
            cd release_package
            tar -czf "../yib-${{ env.RELEASE_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" .
          fi
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            yib-*.tar.gz
            yib-*.zip

  # Job 3: Create a single draft release and upload all the built assets.
  create-release:
    name: Create Draft Release
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create Draft Release on GitHub
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: yib ${{ github.ref_name }}
          draft: true
          prerelease: false

      - name: Upload Release Assets to GitHub
        shell: bash
        run: |
          for dir in release-assets/*; do
            for file in "$dir"/*; do
              echo "Uploading $file..."
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}